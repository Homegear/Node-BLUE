/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

var util = require("@node-red/util").util;
var homegear;

function HomegearCtx(config, _homegear){
    homegear = _homegear;
}

HomegearCtx.prototype.open = function(){
    return Promise.resolve();
};

HomegearCtx.prototype.close = function(){
    return Promise.resolve();
};

HomegearCtx.prototype.get = function(scope, key, callback) {
    var value;
    var error = null;
    try {
        if (scope == "global") value = homegear.invoke("getGlobalData", [key]);
        else if (scope.indexOf(':') == -1) value = homegear.invoke("getFlowData", [scope, key]);
        else value = homegear.invoke("getNodeData", [scope, key]);
    } catch (e) {
        if (!callback) {
            throw e;
        } else {
            callback(e);
            return;
        }

    }
    if (callback) {
        callback(error, value);
    } else {
        return value;
    }
};

HomegearCtx.prototype.set = function(scope, key, value, callback) {
    var error = null;
    try {
        if (scope == "global") homegear.invoke("setGlobalData", [key, value]);
        else if (scope.indexOf(':') == -1) homegear.invoke("setFlowData", [scope, key, value]);
        else homegear.invoke("setNodeData", [scope, key, value]);
    } catch (e) {
        if (!callback) {
            throw e;
        } else {
            error = e;
        }
    }
    if (callback) {
        callback(error);
    }
};

HomegearCtx.prototype.keys = function(scope, callback){
    var values = [];
    var error;
    try{
        values = homegear.invoke("getNodeBlueDataKeys", [scope]);
    }catch(err){
        if(callback){
            error = err;
        }else{
            throw err;
        }
    }
    if(callback){
        if(error){
            callback(error);
        } else {
            callback(null, values);
        }
    } else {
        return values;
    }
};

HomegearCtx.prototype.delete = function(scope){
    //Managed by Homegear
    return Promise.resolve();
};

HomegearCtx.prototype.clean = function(activeNodes){
    //Managed by Homegear
    return Promise.resolve();
}

module.exports = function(config, _homegear){
    return new HomegearCtx(config, _homegear);
};
